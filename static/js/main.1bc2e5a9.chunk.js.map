{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","validationUrl","useState","Math","random","toFixed","slice","id","touched","setTouched","isValid","hasError","htmlFor","type","classNames","event","onBlur","pattern","NewMovie","onAdd","count","setCount","newMovie","setNewMovie","requiredFields","trim","handlergData","prevData","target","validateUrl","test","isUrlValid","onSubmit","preventDefault","currentCount","disabled","App","moviesFromServer","moviesRender","setMoviesRender","prevMovies","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1bc2e5a9.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>, name: string) => void,\n  validationUrl?: (value: string) => boolean\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  validationUrl = () => true,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const isValid = validationUrl(value);\n  const hasError = touched && required && (!value || !isValid);\n\n  const handleBlur = () => {\n    setTouched(true);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event, name)}\n          onBlur={handleBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{!value ? `${label} is required` : 'URL link not correct'}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Movies = {\n  onAdd: (movie: Movie) => void;\n};\n\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/; // eslint-disable-line\n\nexport const NewMovie: React.FC<Movies> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const reset = () => {\n    setNewMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  const requiredFields = newMovie.title.trim()\n    && newMovie.imgUrl.trim()\n    && newMovie.imdbUrl.trim()\n    && newMovie.imdbId.trim();\n\n  function handlergData(\n    event: React.ChangeEvent<HTMLInputElement>,\n    name: string,\n  ): void {\n    setNewMovie(prevData => ({\n      ...prevData,\n      [name]: event.target.value,\n    }));\n  }\n\n  function handleSubmit(event: React.FormEvent) {\n    event.preventDefault();\n\n    if (!requiredFields) {\n      return;\n    }\n\n    setCount(currentCount => currentCount + 1);\n\n    onAdd({ ...newMovie });\n\n    reset();\n  }\n\n  function validateUrl(value: string): boolean {\n    return pattern.test(value);\n  }\n\n  const isUrlValid = validateUrl(newMovie.imgUrl)\n    && validateUrl(newMovie.imdbUrl);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={event => handlergData(event, 'title')}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={event => handlergData(event, 'description')}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        onChange={event => handlergData(event, 'imgUrl')}\n        validationUrl={value => validateUrl(value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        onChange={event => handlergData(event, 'imdbUrl')}\n        validationUrl={value => validateUrl(value)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        onChange={event => handlergData(event, 'imdbId')}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!requiredFields || !isUrlValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [moviesRender, setMoviesRender] = useState(moviesFromServer);\n\n  function addMovie(movie: Movie) {\n    setMoviesRender(prevMovies => [...prevMovies, movie]);\n  }\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesRender} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(movie) => addMovie(movie)} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}